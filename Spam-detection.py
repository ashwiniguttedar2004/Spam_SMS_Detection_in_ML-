{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d2409081-fe2d-409d-a150-38b2d2c7736c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\HP\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import string\n",
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.metrics import (\n",
    "    accuracy_score, precision_score, recall_score, f1_score,\n",
    "    confusion_matrix, classification_report, roc_auc_score, roc_curve\n",
    ")\n",
    "\n",
    "import joblib\n",
    "from wordcloud import WordCloud\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "\n",
    "nltk.download('stopwords')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "23fc8388-8427-4029-8f06-41cb3cddf37f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  label                                            message\n",
      "0   ham  Go until jurong point, crazy.. Available only ...\n",
      "1   ham                      Ok lar... Joking wif u oni...\n",
      "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...\n",
      "3   ham  U dun say so early hor... U c already then say...\n",
      "4   ham  Nah I don't think he goes to usf, he lives aro...\n",
      "label\n",
      "ham     4825\n",
      "spam     747\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(r\"C:\\Users\\HP\\Desktop\\spam.csv\", encoding='latin-1')[['v1', 'v2']]\n",
    "df.columns = ['label', 'message']\n",
    "\n",
    "# Basic info\n",
    "print(df.head())\n",
    "print(df['label'].value_counts())\n",
    "\n",
    "# Plot class distribution\n",
    "sns.countplot(data=df, x='label')\n",
    "plt.title(\"Spam vs Ham Distribution\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6a201a77-dcc7-4dd6-8fbc-14cd1c2f94ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "stop_words = set(stopwords.words('english'))\n",
    "\n",
    "def clean_text(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'\\d+', '', text)  # Remove numbers\n",
    "    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation\n",
    "    text = re.sub(r'\\s+', ' ', text)  # Remove extra spaces\n",
    "    words = text.split()\n",
    "    words = [w for w in words if w not in stop_words]\n",
    "    return ' '.join(words)\n",
    "\n",
    "df['cleaned'] = df['message'].apply(clean_text)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7221c313-1b96-4a8d-be02-a67464941969",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['label_num'] = df['label'].map({'ham': 0, 'spam': 1})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "83800c3c-7562-4794-8fdd-5736afe795c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Word clouds\n",
    "spam_words = ' '.join(df[df['label_num'] == 1]['cleaned'])\n",
    "ham_words = ' '.join(df[df['label_num'] == 0]['cleaned'])\n",
    "\n",
    "plt.figure(figsize=(12,6))\n",
    "plt.subplot(1, 2, 1)\n",
    "WordCloud(width=600, height=400).generate(spam_words).to_image().show()\n",
    "plt.title(\"Spam Word Cloud\")\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "WordCloud(width=600, height=400).generate(ham_words).to_image().show()\n",
    "plt.title(\"Ham Word Cloud\")\n",
    "plt.show()\n",
    "\n",
    "# Message lengths\n",
    "df['length'] = df['message'].apply(len)\n",
    "sns.histplot(data=df, x='length', hue='label', bins=50)\n",
    "plt.title(\"Message Length Distribution\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f9b7d621-c9b1-4629-9a86-4e8668ff3830",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df['cleaned']\n",
    "y = df['label_num']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "478a52fc-55e4-4b53-9330-39ad965acde1",
   "metadata": {},
   "outputs": [],
   "source": [
    "models = {\n",
    "    \"Naive Bayes\": MultinomialNB(),\n",
    "    \"Logistic Regression\": LogisticRegression(max_iter=1000),\n",
    "    \"SVM\": SVC(kernel='linear', probability=True)\n",
    "}\n",
    "\n",
    "pipelines = {}\n",
    "for name, model in models.items():\n",
    "    pipelines[name] = Pipeline([\n",
    "        ('tfidf', TfidfVectorizer()),\n",
    "        ('clf', model)\n",
    "    ])\n",
    "    pipelines[name].fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d22959ef-943e-4533-bf62-f98a5edec4c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: Naive Bayes\n",
      "Accuracy: 0.9632286995515695\n",
      "Precision: 0.990909090909091\n",
      "Recall: 0.7315436241610739\n",
      "F1 Score: 0.8416988416988417\n",
      "Confusion Matrix:\n",
      " [[965   1]\n",
      " [ 40 109]]\n",
      "============================================================\n",
      "Model: Logistic Regression\n",
      "Accuracy: 0.9623318385650225\n",
      "Precision: 0.9908256880733946\n",
      "Recall: 0.7248322147651006\n",
      "F1 Score: 0.8372093023255814\n",
      "Confusion Matrix:\n",
      " [[965   1]\n",
      " [ 41 108]]\n",
      "============================================================\n",
      "Model: SVM\n",
      "Accuracy: 0.9829596412556054\n",
      "Precision: 0.9779411764705882\n",
      "Recall: 0.8926174496644296\n",
      "F1 Score: 0.9333333333333333\n",
      "Confusion Matrix:\n",
      " [[963   3]\n",
      " [ 16 133]]\n",
      "============================================================\n"
     ]
    }
   ],
   "source": [
    "for name, model in pipelines.items():\n",
    "    y_pred = model.predict(X_test)\n",
    "    print(f\"Model: {name}\")\n",
    "    print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "    print(\"Precision:\", precision_score(y_test, y_pred))\n",
    "    print(\"Recall:\", recall_score(y_test, y_pred))\n",
    "    print(\"F1 Score:\", f1_score(y_test, y_pred))\n",
    "    print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
    "    print(\"=\"*60)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3491bc1e-740f-439a-b8b5-00ab75fc4030",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_model = pipelines[\"Naive Bayes\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a044f032-f734-4c86-87d1-a16defb3689f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ham\n",
      "Ham\n"
     ]
    }
   ],
   "source": [
    "def predict_message(msg):\n",
    "    cleaned = clean_text(msg)\n",
    "    pred = best_model.predict([cleaned])[0]\n",
    "    return \"Spam\" if pred == 1 else \"Ham\"\n",
    "\n",
    "# Test\n",
    "print(predict_message(\"Congratulations! You’ve won a $1,000 Walmart gift card.\"))\n",
    "print(predict_message(\"Hey, are we still on for dinner tonight?\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a66b2722-c725-4378-942d-6372048e6dce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top Spam Indicator Words: ['reply' 'text' 'prize' 'stop' 'ur' 'mobile' 'claim' 'txt' 'free' 'call']\n"
     ]
    }
   ],
   "source": [
    "# Show top spam indicator words (from TF-IDF)\n",
    "vectorizer = best_model.named_steps['tfidf']\n",
    "clf = best_model.named_steps['clf']\n",
    "\n",
    "feature_names = np.array(vectorizer.get_feature_names_out())\n",
    "spam_class_index = 1\n",
    "top_indices = np.argsort(clf.feature_log_prob_[1])[-10:]\n",
    "\n",
    "print(\"Top Spam Indicator Words:\", feature_names[top_indices])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e1eee31a-2247-4e71-b9bb-3f39c2945d47",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['spam_classifier_pipeline.pkl']"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Already using Pipeline - Save it\n",
    "joblib.dump(best_model, \"spam_classifier_pipeline.pkl\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3a6f3be5-718f-49b4-81d4-6ec7de4e83ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1]\n"
     ]
    }
   ],
   "source": [
    "# Load and test\n",
    "loaded_model = joblib.load(\"spam_classifier_pipeline.pkl\")\n",
    "print(loaded_model.predict([\"Free entry in 2 a weekly competition to win tickets\"]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "34cc7058-11c2-4a97-9369-004c303ef4d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-26 15:29:48.928 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.582 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\HP\\AppData\\Roaming\\Python\\Python313\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-09-26 15:29:49.583 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.585 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.588 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.590 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.592 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.596 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.597 Session state does not function when running a script without `streamlit run`\n",
      "2025-09-26 15:29:49.599 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.600 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.602 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.604 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.605 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.606 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.608 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.610 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-26 15:29:49.611 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "# Save this as app.py and run with `streamlit run app.py`\n",
    "\n",
    "import streamlit as st\n",
    "import joblib\n",
    "\n",
    "model = joblib.load(\"spam_classifier_pipeline.pkl\")\n",
    "\n",
    "st.title(\"SMS Spam Classifier\")\n",
    "msg = st.text_area(\"Enter your SMS message:\")\n",
    "\n",
    "if st.button(\"Predict\"):\n",
    "    cleaned = clean_text(msg)\n",
    "    result = model.predict([cleaned])[0]\n",
    "    st.write(\"Prediction:\", \"🚫 Spam\" if result == 1 else \"✅ Ham\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09b87274-1a6e-402f-99de-4fe75ed6b57e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
